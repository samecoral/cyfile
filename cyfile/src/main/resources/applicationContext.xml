<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd 
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
          
    <!-- 在applicationContext.xml中只加载除表现层之外的所有bean，因此下面一行中不需要加载@Controller -->                       
    <!-- 扫描注解Bean 不包括@Controller(表现层) 保证@Service @Repository的属性被注入-->
    <aop:aspectj-autoproxy />
    <context:component-scan base-package="com.mtm">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
         <context:exclude-filter type="annotation"  expression="org.springframework.web.bind.annotation.ControllerAdvice"/> 
    </context:component-scan>
    
    
     <!-- 引入配置文件 --> 
	<context:property-placeholder ignore-unresolvable="true" local-override="true" location="classpath:jdbc.properties"/>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
			<property name="driverClassName" value="${jdbc.driver}" />
	        <property name="url" value="${jdbc.url}" />
	        <property name="username" value="${jdbc.username}" />
	        <property name="password" value="${jdbc.password}" />        
	        <!-- 初始化连接数量 -->
	        <property name="initialSize" value="${druid.initialSize}" />
	        <!-- 最大并发连接数 -->
	        <property name="maxActive" value="${druid.maxActive}" />
	        <!-- 最大空闲连接数 -->
	        <property name="maxIdle" value="${druid.maxIdle}" />
	        <!-- 最小空闲连接数 -->
	        <property name="minIdle" value="${druid.minIdle}" />
	        <!-- 配置获取连接等待超时的时间 -->     
	        <property name="maxWait" value="${druid.maxWait}" />
	        <!-- 超过时间限制是否回收 -->
	        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
	        <!-- 超过时间限制多长； -->
	        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
	        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
	        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
	        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
	        <property name="validationQuery" value="${druid.validationQuery}" />
	        <!-- 申请连接的时候检测 -->
	        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
	        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
	        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
	        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
	        <property name="testOnReturn" value="${druid.testOnReturn}" />
	        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />     
	        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
	        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
		                监控统计用的filter:stat
		                日志用的filter:log4j
		                防御SQL注入的filter:wall -->
		     <!-- 
		    <property name="proxyFilters">
				 <list>
					 <ref bean="stat-filter"/>
					 <ref bean="log-filter"/>
				 </list>
			</property>
			 -->
		</bean>
		<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
			 <property name="mergeSql" value="true" />
			 <property name="slowSqlMillis" value="3000" />
			 <property name="logSlowSql" value="true" />
		 </bean> 
		 <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
			 <property name="statementExecutableSqlLogEnable" value="false" />
			 <property name="resultSetLogEnabled" value="false" />
		</bean>
		
	<!-- jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg ref="dataSource" />
	</bean>
  	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" />  
        <!-- 自动扫描mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>  
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
    </bean>  
  
    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.cao.dao" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>  
  
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager"  
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>  
  	
  	<!-- 开启注解事务 只对当前配置文件有效 -->
  	<tx:annotation-driven transaction-manager="transactionManager"/>
  
	<!--配置Spring事务管理器代理-->
	<bean id="transactionProxyFactory" abstract="true" lazy-init="true"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="del*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="query*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="show*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="brow*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="gotoPage*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="log*">PROPAGATION_REQUIRED</prop>
				<prop key="reset*">PROPAGATION_REQUIRED</prop>
				<prop key="show*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="edit*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="brow*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
			</props>
		</property>
	</bean>

</beans>